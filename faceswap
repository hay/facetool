#!/usr/bin/env python3
from lib.faceswap import Faceswap
from glob import glob
from os.path import splitext, basename, isdir
import sys
import argparse
import logging


logger = logging.getLogger(__name__)

parser = argparse.ArgumentParser(description = "Displays the features of face on head")
parser.add_argument('head', type = str, nargs='?')
parser.add_argument('face', type = str, nargs='?')
parser.add_argument('output', type = str, nargs = "?")
parser.add_argument('-pp', '--predictor-path', type = str, default = "./landmarks.dat")
parser.add_argument('-s', '--swap', action="store_true", help = "Swap head and face parameters")
parser.add_argument('-v', '--verbose', action="store_true")
args = parser.parse_args()

def get_outpath(path):
    base = splitext(basename(path))[0]
    outpath = f"{args.output}/{base}.jpg"
    return outpath

def swap(head, face, out):
    logger.debug(f"Processing {head} -> {face}")

    try:
        swapper.faceswap(head = head, face = face, output = out)
    except:
        logger.error("Couldn't convert this face")


if not all([args.head, args.face, args.output]):
    parser.print_help()
    sys.exit()

if args.verbose:
    logging.basicConfig(level=logging.DEBUG)

if args.swap:
    args.head, args.face = args.face, args.head

swapper = Faceswap(predictor_path = args.predictor_path, verbose = args.verbose)

if isdir(args.head) and isdir(args.face):
    heads = sorted(glob(f"{args.head}/*"))
    faces = sorted(glob(f"{args.face}/*"))

    if len(heads) != len(faces):
        logging.warning("Not the same amount of files in heads and faces")

    for index, path in enumerate(heads):
        outpath = get_outpath(path)

        # Check if there is face, and if not, abort mission
        if index > len(faces) - 1:
            logging.warning("Not enough faces, aborting conversion")
            break

        face = faces[index]

        swap(path, face, outpath)
elif isdir(args.head):
    inpath = f"{args.head}/*"

    for path in glob(inpath):
        outpath = get_outpath(path)
        swap(path, args.face, outpath)
elif args.head and args.face:
    swap(args.head, args.face, args.outpath)
else:
    parser.print_help()